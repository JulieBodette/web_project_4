!function(){"use strict";class e{constructor(e,t){this.settings=e,this.formElement=t}_showInputError(e,t){const n=this.formElement.querySelector(".".concat(e.id,"-error"));n.textContent=t,n.classList.remove(this.settings.inputErrorClass),n.classList.add(this.settings.errorClass)}hideInputError(e){const t=this.formElement.querySelector(".".concat(e.id,"-error"));t.classList.add(this.settings.inputErrorClass),t.classList.remove(this.settings.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this.hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_toggleButtonState(e,t){this._hasInvalidInput(e)?this._disableButton(t):this._enableButton(t)}_disableButton(e){e.classList.add(this.settings.inactiveButtonClass)}_enableButton(e){e.classList.remove(this.settings.inactiveButtonClass)}setButtonInactive(){const e=this.formElement.querySelector(this.settings.submitButtonSelector);this._disableButton(e)}enableValidation(){const e=Array.from(this.formElement.querySelectorAll(this.settings.inputSelector)),t=this.formElement.querySelector(this.settings.submitButtonSelector);this._toggleButtonState(e,t),e.forEach((n=>{n.addEventListener("input",(()=>{this._checkInputValidity(n),this._toggleButtonState(e,t)}))}))}}const t={formSelector:".modal__form",inputSelector:".modal__input-text",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__error",errorClass:"modal__error_visible"};function n(e){e.classList.add("modal_open")}function o(e){e.classList.remove("modal_open")}const r=document.querySelector("#image-popup");class a{constructor(e,t){this.cardName=e.name,this.cardLink=e.link,this.cardTemplate=document.querySelector(t).content.querySelector(".element"),this.newCard,this.cardImage}createCardElement(){return this.newCard=this.cardTemplate.cloneNode(!0),this._setImageAndName(),this._setEventListener(),this.newCard}_setEventListener(){const e=this.newCard.querySelector(".element__like"),t=this.newCard.querySelector(".element__trash");e.addEventListener("click",this._like),t.addEventListener("click",this._delete),this.newCard.querySelector(".element__image").addEventListener("click",(()=>{this._openImagePopup()}))}_like(e){e.target.classList.toggle("element__like_active")}_openImagePopup(){!function(e,t){const n=r.querySelector(".popup__image"),o=r.querySelector(".popup__caption");n.src=t,o.textContent=e,n.alt=e}(this.cardName,this.cardLink),n(r)}_delete(e){e.target,e.target.closest(".element").remove()}_setImageAndName(){this.cardImage=this.newCard.querySelector(".element__image"),this.cardImage.style="background-image:url(".concat(this.cardLink,");"),this.newCard.querySelector(".element__text").textContent=this.cardName}}function s(e,t){return new a(e,t).createCardElement()}const i=document.querySelector("#profile-info-edit-button"),l=document.querySelector("#edit-profile-modal"),c=l.querySelector(".modal__form"),d=document.querySelector(".profile__info-name"),m=document.querySelector(".profile__info-title"),u=c.querySelector('[name="name"]'),h=c.querySelector('[name="title"]'),_=document.querySelector("#profile-add-button"),p=document.querySelector("#add-card-modal"),y=p.querySelector(".modal__form"),g=y.querySelector('[name="imagename"]'),f=y.querySelector('[name="imagelink"]'),S=Array.from(document.querySelectorAll(t.formSelector)).map((n=>{const o=new e(t,n);return o.enableValidation(),o})),v=S.find((e=>"nameandtitle"==e.formElement.getAttribute("name"))),E=S.find((e=>"imagenameandlink"==e.formElement.getAttribute("name"))),q=document.querySelector(".grid");[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}].forEach((function(e){const t=s(e,"#card-template");q.append(t)})),i.addEventListener("click",(()=>{n(l),u.value=d.textContent,h.value=m.textContent,Array.from(v.formElement.querySelectorAll(t.inputSelector)).forEach((e=>{v.hideInputError(e)}))})),c.addEventListener("submit",(function(e){e.preventDefault(),d.textContent=u.value,m.textContent=h.value,o(l)})),_.addEventListener("click",(()=>{n(p)})),y.addEventListener("submit",(function(e){e.preventDefault();const t=s({name:g.value,link:f.value},"#card-template");q.prepend(t),y.reset(),E.setButtonInactive(),o(p)})),Array.from(document.querySelectorAll(".modal__close-button")).forEach((e=>{const t=e.closest(".modal");e.addEventListener("click",(()=>o(t)))})),Array.from(document.querySelectorAll(".modal")).forEach((e=>{e.addEventListener("mousedown",(t=>{t.target.classList.contains("modal")&&o(e)})),document.addEventListener("keydown",(t=>{"Escape"===t.key&&o(e)}))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TEksQ0FDbEIxQixLQUFNcUMsRUFBZWMsTUFDckJqRCxLQUFNb0MsRUFBZWEsT0FHaUIsa0JBQ3hDSCxFQUFVSyxRQUFRaEQsR0FDbEIrQixFQUFZa0IsUUFDWlAsRUFBZW5FLG9CQUNmYSxFQUFXMEMsTUFPUXBELE1BQU1DLEtBQ3pCVyxTQUFTVixpQkFBaUIseUJBR2ZFLFNBQVNvRSxJQUVwQixNQUFNL0QsRUFBUStELEVBQU8vQixRQUFRLFVBRTdCK0IsRUFBT25FLGlCQUFpQixTQUFTLElBQU1LLEVBQVdELFFBR3JDVCxNQUFNQyxLQUFLVyxTQUFTVixpQkFBaUIsV0FDN0NFLFNBQVNLLElBQ2RBLEVBQU1KLGlCQUFpQixhQUFjNEIsSUFLakNBLEVBQUlDLE9BQU92RCxVQUFVOEYsU0FBUyxVQUU5Qi9ELEVBQVdELE1BSWZHLFNBQVNQLGlCQUFpQixXQUFZNEIsSUFFcEIsV0FBWkEsRUFBSXlDLEtBQ05oRSxFQUFXRCxTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9zY3JpcHRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9zY3JpcHRzL3V0aWxzLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy9DYXJkLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9zY3JpcHRzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG5jbGFzcyBGb3JtVmFsaWRhdG9ye1xyXG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBmb3JtRWxlbWVudCl7XHJcbiAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICB0aGlzLmZvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgZXJyb3JNZXNzYWdlKSB7XHJcbiAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XHJcbiAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xyXG4gIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzKTsgLy90aGUgY2xhc3MgdGhhdCBtYWtlcyBpdCBpbnZpc2libGVcclxuICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MpOyAvL3RoZSBjbGFzcyB0aGF0IG1ha2VzIGl0IHZpc2libGVcclxufVxyXG5cclxuLy9wdWJsaWMgYmVjYXVzZSBpdCBpcyB1c2VkIGluIGluZGV4LmpzIGZvciBoaWRpbmcgZXJyb3Igb24gZm9ybSByZXNldFxyXG5oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLmZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgKTtcclxuICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLnNldHRpbmdzLmlucHV0RXJyb3JDbGFzcyk7IC8vdGhlIGNsYXNzIHRoYXQgbWFrZXMgaXQgaW52aXNpYmxlXHJcbiAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzKTsgLy90aGUgY2xhc3MgdGhhdCBtYWtlcyBpdCB2aXNpYmxlXHJcbiAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxufVxyXG5cclxuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpIHtcclxuICAvL3RoaXMgZnVuY3Rpb24gZG9lcyBub3QgdXNlIHNldHRpbmdzIGJ1dCB0aGUgZnVuY3Rpb24gdGhhdCBpdCBjYWxscyBkb2VzXHJcbiAgLy90aGVyZWZvcmUgd2UgbXVzdCBzZW5kIGl0IHNldHRpbmdzIHNvIGl0IGNhbiBwYXNzIHRoZW0gb25cclxuICBpZiAoIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoXHJcbiAgICAgIGlucHV0RWxlbWVudCxcclxuICAgICAgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlLFxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy5oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gIH1cclxufVxyXG5cclxuX2hhc0ludmFsaWRJbnB1dChpbnB1dExpc3QpIHtcclxuICByZXR1cm4gaW5wdXRMaXN0LnNvbWUoKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XHJcbiAgfSk7XHJcbn1cclxuXHJcbl90b2dnbGVCdXR0b25TdGF0ZShpbnB1dExpc3QsIGJ1dHRvbkVsZW1lbnQpIHtcclxuICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KGlucHV0TGlzdCkpIHtcclxuICAgIHRoaXMuX2Rpc2FibGVCdXR0b24oYnV0dG9uRWxlbWVudCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMuX2VuYWJsZUJ1dHRvbihidXR0b25FbGVtZW50KTtcclxuICB9XHJcbn1cclxuXHJcbl9kaXNhYmxlQnV0dG9uKGJ1dHRvbkVsZW1lbnQpXHJcbntcclxuICBidXR0b25FbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5zZXR0aW5ncy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxufVxyXG5cclxuX2VuYWJsZUJ1dHRvbihidXR0b25FbGVtZW50KVxyXG57XHJcbiAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbn1cclxuXHJcbnNldEJ1dHRvbkluYWN0aXZlKCkvL3B1YmxpYyBtZXRob2QgY2FsbGVkIHdoZW4gbmV3IGNhcmQgaWEgYWRkZWQtIGJ1dHRvbiBuZWVkcyBzZXQgdG8gaW5hY3RpdmUgYmVmb3JlIG5ldyB2YWx1ZXMgYXJlIHR5cGVkXHJcbntcclxuICBjb25zdCBidXR0b25FbGVtZW50ID0gdGhpcy5mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgdGhpcy5zZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3RvclxyXG4gICk7XHJcbiAgdGhpcy5fZGlzYWJsZUJ1dHRvbihidXR0b25FbGVtZW50KTtcclxufVxyXG5lbmFibGVWYWxpZGF0aW9uKCl7XHJcbiAgY29uc3QgaW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgIHRoaXMuZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLnNldHRpbmdzLmlucHV0U2VsZWN0b3IpXHJcbiAgKTtcclxuICBjb25zdCBidXR0b25FbGVtZW50ID0gdGhpcy5mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgdGhpcy5zZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3RvclxyXG4gICk7XHJcbiAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRMaXN0LCBidXR0b25FbGVtZW50KTsgLy9pbml0aWFsIHRvZ2dsZSBvZiB0aGUgYnV0dG9uIG9uIHBhZ2UgbG9hZFxyXG4gIGlucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAvL2V2ZW50IGxpc3RlbmVyIHRyaWdnZXJzIHdoZW4gdGV4dCBpcyBpbnB1dDpcclxuICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCk7IC8vY2hlY2sgaWYgdGhlIGlucHV0IGlzIHZhbGlkIChzZWUgaWYgZXJyb3Igc2hvdWxkIGJlIGRpc3BsYXllZClcclxuICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRMaXN0LCBidXR0b25FbGVtZW50KTsgLy9jaGVjayBpZiBpbnB1dCBpcyB2YWxpZCAoc2VlIGlmIHN1Ym1pdCBidXR0b24gc2hvdWxkIGJlIGFjdGl2ZSlcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcblxyXG59XHJcblxyXG4vLyBlbmFibGluZyB2YWxpZGF0aW9uIGJ5IGNhbGxpbmcgZW5hYmxlVmFsaWRhdGlvbigpXHJcbi8vIHBhc3MgYWxsIHRoZSBzZXR0aW5ncyBvbiBjYWxsXHJcbmNvbnN0IGN1c3RvbVNldHRpbmdzID0ge1xyXG4gIGZvcm1TZWxlY3RvcjogXCIubW9kYWxfX2Zvcm1cIixcclxuICBpbnB1dFNlbGVjdG9yOiBcIi5tb2RhbF9faW5wdXQtdGV4dFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fc3VibWl0LWJ1dHRvblwiLFxyXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX3N1Ym1pdC1idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2Vycm9yXCIsXHJcbiAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfdmlzaWJsZVwiLFxyXG59O1xyXG5cclxuXHJcblxyXG4vL2V4cG9ydCBmdW5jdGlvbnMgdG8gaW5kZXguanNcclxuZXhwb3J0IHsgRm9ybVZhbGlkYXRvciwgY3VzdG9tU2V0dGluZ3MgfTtcclxuIiwiLy90aGUgZXZlbnQgaGFuZGxlcnMgYW5kIHRoZSBmdW5jdGlvbiB0aGF0IG9wZW5zL2Nsb3NlcyBtb2RhbCB3aW5kb3dzLlxyXG5cclxuLy9zZXREYXRhSW1hZ2VQb3B1cChuYW1lLCBsaW5rKSBhbmQgb3Blbk1vZGFsKGltYWdlUG9wdXApIGFyZSB1c2VkIGJ5IENhcmQuanNcclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1VuaXZlcnNhbCBPcGVuL0Nsb3NlIE1vZGFsIEZ1bmN0aW9uc1xyXG5mdW5jdGlvbiBvcGVuTW9kYWwobW9kYWwpIHtcclxuICAgIC8qIFRoZSB2aXNpYmxlIGNsYXNzIG92ZXJyaWRlcyB0aGUgcHJldmlvdXMgY2xhc3MgYmVjYXVzZSBpdHMgZmFydGhlciBkb3duIHRoZSBwYWdlLiBzZWUgbW9kYWwuY3NzLiovXHJcbiAgICBtb2RhbC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlblwiKTsgLyphY3RpdmF0ZSBhIGNsYXNzIHRoYXQgbWFrZXMgaXQgdmlzaWJsZSovXHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGNsb3NlTW9kYWwobW9kYWwpIHtcclxuICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXHJcbiAgICAgIFwibW9kYWxfb3BlblwiXHJcbiAgICApOyAvKmRlYWN0aXZhdGUgYSBjbGFzcyB0aGF0IG1ha2VzIGl0IHZpc2libGUqL1xyXG4gIH1cclxuXHJcblxyXG4gIGNvbnN0IGltYWdlUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2ltYWdlLXBvcHVwXCIpO1xyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vU2V0IHVwIGltYWdlIHBvcHVwXHJcbmZ1bmN0aW9uIHNldERhdGFJbWFnZVBvcHVwKG5hbWUsIGxpbmspIHtcclxuICAgIC8vbmFtZSBhbmQgbGluayBhcmUgc3RyaW5nc1xyXG4gICAgLy9mcm9tIHRoZSBET00sIHNlbGVjdCB0aGUgaW1hZ2UgcG9wdXAgYW5kIGl0cyBwaWN0dXJlIGFuZCB0ZXh0IGFuZCBYIChjbG9zZSBidXR0b24pXHJcbiAgICBjb25zdCBpbWFnZVBvcHVwUGljID0gaW1hZ2VQb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19pbWFnZVwiKTtcclxuICAgIGNvbnN0IGltYWdlUG9wdXBUZXh0ID0gaW1hZ2VQb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19jYXB0aW9uXCIpO1xyXG4gICAgaW1hZ2VQb3B1cFBpYy5zcmMgPSBsaW5rO1xyXG4gICAgaW1hZ2VQb3B1cFRleHQudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgaW1hZ2VQb3B1cFBpYy5hbHQgPSBuYW1lO1xyXG4gIH1cclxuXHJcblxyXG4gIGV4cG9ydCB7aW1hZ2VQb3B1cCwgb3Blbk1vZGFsLCBjbG9zZU1vZGFsLCBzZXREYXRhSW1hZ2VQb3B1cH07IiwiXHJcbmltcG9ydCB7aW1hZ2VQb3B1cCwgb3Blbk1vZGFsLCBzZXREYXRhSW1hZ2VQb3B1cH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcclxuY2xhc3MgQ2FyZCB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCB0ZW1wbGF0ZVNlbGVjdG9yKXtcclxuICAgICAgdGhpcy5jYXJkTmFtZSA9IGRhdGEubmFtZTtcclxuICAgICAgdGhpcy5jYXJkTGluayA9IGRhdGEubGluaztcclxuICAgICAgdGhpcy5jYXJkVGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRlbXBsYXRlU2VsZWN0b3IpLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5lbGVtZW50XCIpO1xyXG4gICAgICAvL3NlbGVjdCB0aGUgdGVtcGxhdGUsIHVzZSAuY29udGVudCB0byBnZXQgdGhlIGNvbnRlbnQgaW5zaWRlIHRoZSB0ZW1wbGF0ZSwgdGhlbiBxdWVyeSBzZWxlY3RvciBhZ2FpbiB0byBnZXQgdGhlIGVsZW1lbnQgY2xhc3NcclxuICAgICAgdGhpcy5uZXdDYXJkOyAvL3dpbGwgYmUgc2V0IHRvIHRoZSBjYXJkIGVsZW1lbnRcclxuICAgICAgdGhpcy5jYXJkSW1hZ2U7IC8vd2lsbCBiZSBzZXQgdG8gdGhlIGltYWdlIGluIHRoZSBjYXJkXHJcblxyXG4gICAgfVxyXG4gICAgY3JlYXRlQ2FyZEVsZW1lbnQoKVxyXG4gICAge1xyXG4gICAgICAvL21ha2UgYSBjb3B5IG9mIHRoZSB0ZW1wbGF0ZSB1c2luZyBjbG9uZU5vZGVcclxuICAgIHRoaXMubmV3Q2FyZCA9IHRoaXMuY2FyZFRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTsgLy90cnVlIGNsb25lcyBldmVyeXRoaW5nIGluc2lkZVxyXG4gIFxyXG4gICAgdGhpcy5fc2V0SW1hZ2VBbmROYW1lKCk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVyKCk7XHJcbiAgXHJcbiAgICAvL3JldHVybiBuZXcgY2FyZCBzbyB0aGF0IGl0IGNhbiBiZSBhZGRlZCB0byB0aGUgZ3JpZCB3aGVuIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkXHJcbiAgICByZXR1cm4gdGhpcy5uZXdDYXJkO1xyXG4gICAgfVxyXG4gICAgX3NldEV2ZW50TGlzdGVuZXIoKVxyXG4gICAge1xyXG4gIFxyXG4gICAgLy9xdWVyeSBzZWxlY3RvciB0aGUgbGlrZSBhbmQgZGVsZXRlIGJ1dHRvblxyXG4gICAgY29uc3QgbGlrZUJ1dHRvbiA9IHRoaXMubmV3Q2FyZC5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRfX2xpa2VcIik7XHJcbiAgICBjb25zdCBkZWxldGVCdXR0b24gPSB0aGlzLm5ld0NhcmQucXVlcnlTZWxlY3RvcihcIi5lbGVtZW50X190cmFzaFwiKTtcclxuICAgIC8vYWRkIGV2ZW50IGxpc3RlbmVycyBmb3IgbGlrZSBhbmQgZGVsZXRlXHJcbiAgICBsaWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9saWtlKTsgLy9zZW5kIGl0IHRoZSBmdW5jdGlvbiBuYW1lIGllIHRoaXMuX2xpa2Ugd2l0aCBOT1BBUkVOVEhFU0VTLiB0aGlzLl9saWtlKCkgQkFELCBXSUxMIENBTEwgRlVOQ1RJT04gT04gUEFHRSBMT0FEXHJcbiAgICBkZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuX2RlbGV0ZSk7XHJcblxyXG4gICAgLy9xdWVyeSBzZWxlY3RvciB0aGUgaW1hZ2UuIHdoZW4gdGhpcyBpbWFnZSBpcyBjbGlja2VkIG9uLCBhIHBvcHVwIG9wZW5zLlxyXG4gICAgY29uc3QgY2FyZEltYWdlID0gdGhpcy5uZXdDYXJkLnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudF9faW1hZ2VcIik7XHJcbiAgICAvL2FkZCBldmVudCBsaXN0ZW5lciB0byBpbWFnZVxyXG4gICAgY2FyZEltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7dGhpcy5fb3BlbkltYWdlUG9wdXAoKX0pO1xyXG4gICAgXHJcblxyXG4gICAgfSAvL2VuZCBfc2V0RXZlbnRMaXN0ZW5lclxyXG5cclxuICAgIF9saWtlKGV2dClcclxuICAgIHtcclxuICAgICAgY29uc3QgaGVhcnQgPSBldnQudGFyZ2V0Oy8vdGhlIGV2ZW50IHRhcmdldCBpcyB0aGUgaGVhcnQgYnV0dG9uIHRoYXQgdGhlIHVzZXIgY2xpY2tlZCBvblxyXG4gICAgICBoZWFydC5jbGFzc0xpc3QudG9nZ2xlKFwiZWxlbWVudF9fbGlrZV9hY3RpdmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgX29wZW5JbWFnZVBvcHVwKClcclxuICAgIHtcclxuICAgICAgc2V0RGF0YUltYWdlUG9wdXAodGhpcy5jYXJkTmFtZSwgdGhpcy5jYXJkTGluayk7IFxyXG4gICAgICBvcGVuTW9kYWwoaW1hZ2VQb3B1cCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2RlbGV0ZShldnQpXHJcbiAgICB7XHJcbiAgICAgIGNvbnN0IHRyYXNoID0gZXZ0LnRhcmdldDsvL3RoZSBldmVudCB0YXJnZXQgaXMgdGhlIHRyYXNoIGJ1dHRvbiB0aGF0IHRoZSB1c2VyIGNsaWNrZWQgb25cclxuICAgICAgY29uc3QgY2FyZCA9IGV2dC50YXJnZXQuY2xvc2VzdCgnLmVsZW1lbnQnKTsgLy9nZXRzIHRoZSBjbG9zZXN0IHBhcmVudCB3aXRoIGNsYXNzIGVsZW1lbnQuIEZpcnN0IHBhcmVudCBpcyBidXR0b24sIHNlY29uZCBpcyBlbGVtZW50IGRpdlxyXG4gICAgICBjYXJkLnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgX3NldEltYWdlQW5kTmFtZSgpXHJcbiAgICB7XHJcbiAgICAgIHRoaXMuY2FyZEltYWdlID0gdGhpcy5uZXdDYXJkLnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudF9faW1hZ2VcIik7XHJcbiAgICB0aGlzLmNhcmRJbWFnZS5zdHlsZSA9IGBiYWNrZ3JvdW5kLWltYWdlOnVybCgke3RoaXMuY2FyZExpbmt9KTtgOyAvL3RlbXBsYXRlIGxpdGVyYWwgaGFzIGAgYXQgdGhlIGJlZ2dpbmlnbiBhbmQgZW5kIGluc3RlYWQgb2YgXCJcIlxyXG4gICAgLy9hbHNvIHRlbXBsYXRlIGxpdGVyYWwgaGFzICR7Y2FyZExpbmt9IChubyBxdW90ZXMpIGV2ZW4gdGhvdWdoIGNhcmRMSW5rIGlzIGEgc3RyaW5nXHJcbiAgICAvL3VzZSAuc3JjIGhlcmUgaWYgaW1hZ2UgdGFnLCBJIGFtIHVzaW5nIHN0eWxlIGFuZCBiYWNrZ3JvdW5kIGltYWdlIGJlY2F1c2UgaXQgaXMgYnV0dG9uXHJcbiAgICB0aGlzLm5ld0NhcmQucXVlcnlTZWxlY3RvcihcIi5lbGVtZW50X190ZXh0XCIpLnRleHRDb250ZW50ID0gdGhpcy5jYXJkTmFtZTtcclxuICBcclxuICAgIH1cclxuICBcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlbmRlckNhcmQoZGF0YSwgdGVtcGxhdGVTZWxlY3RvcilcclxuICB7XHJcbiAgICAvL3JldHVybiBhIGNhcmQgZWxlbWVudFxyXG4gICAgLy90ZW1wbGF0ZVNlbGVjdG9yIHNob3VsZCBiZSBzZXQgdG8gXCIjY2FyZC10ZW1wbGF0ZVwiIChtYXkgY2hhbmdlIGlmIG1vcmUgY2FyZCB0ZW1wbGF0ZXMgYXJlIGFkZGVkKVxyXG4gICAgY29uc3QgY2FyZE9iaiA9IG5ldyBDYXJkKGRhdGEsIHRlbXBsYXRlU2VsZWN0b3IpOy8vY3JlYXRlIGEgY2FyZCBvYmplY3RcclxuICAgIGNvbnN0IG5ld0NhcmQgPSBjYXJkT2JqLmNyZWF0ZUNhcmRFbGVtZW50KCk7IC8vY3JlYXRlIGEgY2FyZCBlbGVtZW50XHJcbiAgICByZXR1cm4gbmV3Q2FyZDtcclxuICB9XHJcblxyXG4gIGV4cG9ydCB7cmVuZGVyQ2FyZH07IiwiLy9tYWtpbmcgdGhlIGluaXRpYWwgY2FyZHMgdmlhIEphdmFzY3JpcHRcclxuY29uc3QgaW5pdGlhbENhcmRzID0gW1xyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIllvc2VtaXRlIFZhbGxleVwiLFxyXG4gICAgICBsaW5rOiBcImh0dHBzOi8vY29kZS5zMy55YW5kZXgubmV0L3dlYi1jb2RlL3lvc2VtaXRlLmpwZ1wiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJMYWtlIExvdWlzZVwiLFxyXG4gICAgICBsaW5rOiBcImh0dHBzOi8vY29kZS5zMy55YW5kZXgubmV0L3dlYi1jb2RlL2xha2UtbG91aXNlLmpwZ1wiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJCYWxkIE1vdW50YWluc1wiLFxyXG4gICAgICBsaW5rOiBcImh0dHBzOi8vY29kZS5zMy55YW5kZXgubmV0L3dlYi1jb2RlL2JhbGQtbW91bnRhaW5zLmpwZ1wiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJMYXRlbWFyXCIsXHJcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvbGF0ZW1hci5qcGdcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXHJcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvdmFub2lzZS5qcGdcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiTGFnbyBkaSBCcmFpZXNcIixcclxuICAgICAgbGluazogXCJodHRwczovL2NvZGUuczMueWFuZGV4Lm5ldC93ZWItY29kZS9sYWdvLmpwZ1wiLFxyXG4gICAgfSxcclxuICBdO1xyXG5cclxuICBleHBvcnQge2luaXRpYWxDYXJkc307IiwiaW1wb3J0IHtcclxuICBGb3JtVmFsaWRhdG9yLFxyXG4gIGN1c3RvbVNldHRpbmdzLFxyXG59IGZyb20gXCIuL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuXHJcbmltcG9ydCB7XHJcbiAgcmVuZGVyQ2FyZFxyXG59IGZyb20gXCIuL0NhcmQuanNcIjtcclxuXHJcbmltcG9ydCB7b3Blbk1vZGFsLCBjbG9zZU1vZGFsfSBmcm9tIFwiLi91dGlscy5qc1wiO1xyXG5cclxuaW1wb3J0IHtpbml0aWFsQ2FyZHN9IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vU2V0IHVwIGVkaXQgcHJvZmlsZSB0ZXh0IGJ1dHRvbiBhbmQgbW9kYWwgZm9yIGl0XHJcbi8vdXNlIGNvbnN0IHNvIHRoYXQgdGhlIHZhbHVlIGRvZXMgbm90IGNoYW5nZVxyXG5jb25zdCBlZGl0UHJvZmlsZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1pbmZvLWVkaXQtYnV0dG9uXCIpOyAvLy9maW5kIHRoZSBlZGl0IGJ1dHRvbiBmcm9tIHByb2ZpbGUtdGhpcyBvcGVucyB0aGUgbW9kYWwgcGFuZWxcclxuY29uc3QgZWRpdFByb2ZpbGVNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZWRpdC1wcm9maWxlLW1vZGFsXCIpOyAvL3VzaW5nIElEIHRvIGZpbmQgdGhlIG1vZGFsIChwb3AgdXApLiBJRCBpcyB1bmlxdWUsIG1ha2VzIGl0IGEgbGl0dGxlIGJldHRlciB0aGFuIGEgY2xhc3MuIG5lZWRlZCBiZWNhdXNlIHRoZXJlIGFyZSBtdWx0aXBsZSBtb2RhbHMgKHBvcCB1cHMpIHdpdGggc2FtZSBjbGFzc1xyXG5jb25zdCBlZGl0UHJvZmlsZUZvcm0gPSBlZGl0UHJvZmlsZU1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7IC8vZmluZCB0aGUgZm9ybS4gZm9ybSBoYXMgMiB0ZXh0IGJveGVzIGFuZCBhIHN1Ym1pdCBidXR0b24uIFNlYXJjaCB3aXRoaW4gZWRpdFByb2ZpbGVNb2RhbCBpbnN0ZWFkIG9mIGRvY3VtZW50IHNvIHRoYXQgd2UgZmluZCB0aGUgY29ycmVjdCBmb3JtXHJcbi8vZmluZCB0aGUgdGV4dCBvbiB0aGUgcGFnZSB0aGF0IHNob3dzIG5hbWUgYW5kIHRpdGxlXHJcbmNvbnN0IG5hbWVUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19pbmZvLW5hbWVcIik7XHJcbmNvbnN0IHRpdGxlVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9faW5mby10aXRsZVwiKTtcclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy8gZmluZCB0aGUgZm9ybSBmaWVsZHMgaW4gdGhlIERPTVxyXG5jb25zdCBuYW1lSW5wdXQgPSBlZGl0UHJvZmlsZUZvcm0ucXVlcnlTZWxlY3RvcignW25hbWU9XCJuYW1lXCJdJyk7XHJcbmNvbnN0IHRpdGxlSW5wdXQgPSBlZGl0UHJvZmlsZUZvcm0ucXVlcnlTZWxlY3RvcignW25hbWU9XCJ0aXRsZVwiXScpO1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1NldCB1cCBhZGQgY2FyZCBidXR0b24gYW5kIG1vZGFsIGZvciBpdFxyXG5jb25zdCBhZGRDYXJkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLWFkZC1idXR0b25cIik7IC8vL2ZpbmQgdGhlICsgYnV0dG9uIChhZGQgY2FyZCktdGhpcyBvcGVucyB0aGUgbW9kYWwgcGFuZWxcclxuY29uc3QgYWRkQ2FyZE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhZGQtY2FyZC1tb2RhbFwiKTsgLy91c2luZyBJRCB0byBmaW5kIHRoZSBtb2RhbCAocG9wIHVwKS5cclxuY29uc3QgYWRkQ2FyZEZvcm0gPSBhZGRDYXJkTW9kYWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTsgLy9maW5kIHRoZSBmb3JtLlxyXG5cclxuLy8gZmluZCB0aGUgZm9ybSBmaWVsZHMgaW4gdGhlIERPTVxyXG5jb25zdCBpbWFnZU5hbWVJbnB1dCA9IGFkZENhcmRGb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwiaW1hZ2VuYW1lXCJdJyk7XHJcbmNvbnN0IGltYWdlTGlua0lucHV0ID0gYWRkQ2FyZEZvcm0ucXVlcnlTZWxlY3RvcignW25hbWU9XCJpbWFnZWxpbmtcIl0nKTtcclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vZ2V0IGFsbCBmb3JtcyBhbmQgY3JlYXRlIEZvcm1WYWxpZGF0b3Igb2JqZWN0cyBvdXQgb2YgdGhlbVxyXG5cclxuY29uc3QgZm9ybUVsZW1lbnRzTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjdXN0b21TZXR0aW5ncy5mb3JtU2VsZWN0b3IpKTtcclxuLy9nZXQgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy0gdGhlc2UgYXJlIHRoZSBodG1sIGVsZW1lbnRzIGluIHRoZSBET01cclxuXHJcbi8vbWFwIHRha2VzIGVhY2ggZm9ybSBlbGVtZW50IGluIHRoZSBhcnJheSBhbmQgY3JlYXRlcyB0aGUgZm9ybVZhbGlkYXRvciBvYmplY3QgZm9yIGl0LCB0aGVuIHN0b3JlcyB0aGUgZm9ybVxyXG4vL29iamVjdCBpbiB0aGUgYXJyYXlcclxuY29uc3QgZm9ybVZhbGlkYXRvck9iakxpc3QgPSBmb3JtRWxlbWVudHNMaXN0Lm1hcCgoZm9ybSkgPT4ge1xyXG5cclxuICAvL0NyZWF0ZSBhIGZvcm0gb2JqZWN0IGFuZCBjYWxsIHRoZSBwdWJsaWMgbWV0aG9kIGVuYWJsZVZhbGlkYXRpb25cclxuICBjb25zdCBmb3JtT2JqID0gbmV3IEZvcm1WYWxpZGF0b3IoY3VzdG9tU2V0dGluZ3MsIGZvcm0pO1xyXG4gIGZvcm1PYmouZW5hYmxlVmFsaWRhdGlvbigpO1xyXG4gIHJldHVybiBmb3JtT2JqO1xyXG59KTsgXHJcblxyXG4vL3dpdGhpbiB0aGUgZm9ybSBvYmplY3QsIGdldCB0byB0aGUgZm9ybSBlbGVtZW50IGFuZCB0aGVuIGZpbmQgdGhlIGZvcm0gd2l0aCB0aGUgY29ycmVjdCBuYW1lXHJcbmNvbnN0IGVkaXRQcm9maWxlRm9ybU9iaiA9IGZvcm1WYWxpZGF0b3JPYmpMaXN0LmZpbmQoIG9iaiA9PiBvYmouZm9ybUVsZW1lbnQuZ2V0QXR0cmlidXRlKFwibmFtZVwiKSA9PSBcIm5hbWVhbmR0aXRsZVwiKTtcclxuY29uc3QgYWRkQ2FyZEZvcm1PYmogPSBmb3JtVmFsaWRhdG9yT2JqTGlzdC5maW5kKCBvYmogPT4gb2JqLmZvcm1FbGVtZW50LmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT0gXCJpbWFnZW5hbWVhbmRsaW5rXCIpO1xyXG5cclxuLy9nZXQgYSByZWZlcmVuY2UgdG8gdGhlIGdyaWQvY29udGFpbmVyIHRoYXQgd2Ugd2lsbCBwdXQgdGhlIGNhcmRzIGluXHJcbmNvbnN0IGNhcmRzR3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZ3JpZFwiKTtcclxuXHJcbi8vbG9vcCB0aHJ1IHRoZSBpbml0aWFsQ2FyZHMgYXJyYXkgYW5kIHNlbmQgZWFjaCBvbmUgaW50byB0aGUgZ2V0Q2FyZEVsZW1lbnQgZnVuY3Rpb25cclxuaW5pdGlhbENhcmRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICBjb25zdCBuZXdDYXJkID0gcmVuZGVyQ2FyZChpdGVtLCBcIiNjYXJkLXRlbXBsYXRlXCIpO1xyXG4gIGNhcmRzR3JpZC5hcHBlbmQobmV3Q2FyZCk7IC8vYXBwZW5kIGl0IHRvIHRoZSBncmlkXHJcbn0pO1xyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1NldCB1cCBlZGl0IHByb2ZpbGUgbW9kYWxcclxuZWRpdFByb2ZpbGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBvcGVuTW9kYWwoZWRpdFByb2ZpbGVNb2RhbCk7XHJcbiAgLy90aGlzIG1ha2VzIHN1cmUgZGF0YSBpbiB0aGUgZm9ybSBmaWVsZCBpcyBjb3JyZWN0IGlmIHlvdSBjbG9zZSB3aXRob3V0IHNhdmluZ1xyXG4gIC8vaWYgeW91IGNsb3NlIHdpdGhvdXQgc2F2aW5nIGl0IHNob3VsZCBiZSBzZXQgdG8gdGhlIHByZXZpb3VzIHZhbHVlcyBmcm9tIHRoZSBwYWdlLCBOT1Qgd2hhdGV2ZXIgdSB0eXBlZCBhbmQgZGlkbnQgc2F2ZVxyXG4gIG5hbWVJbnB1dC52YWx1ZSA9IG5hbWVUZXh0LnRleHRDb250ZW50O1xyXG4gIHRpdGxlSW5wdXQudmFsdWUgPSB0aXRsZVRleHQudGV4dENvbnRlbnQ7XHJcbiAgLy9nZXQgdGhlIHBhcmFtZXRlcnMgdG8gc2VuZCB0byBjaGVja0lucHV0VmFsaWRpdHlcclxuICBcclxuICBjb25zdCBpbnB1dExpc3QgPSBBcnJheS5mcm9tKFxyXG4gICAgZWRpdFByb2ZpbGVGb3JtT2JqLmZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY3VzdG9tU2V0dGluZ3MuaW5wdXRTZWxlY3RvcilcclxuICApO1xyXG4gIC8vbG9vcCB0aHJvdWdoIGFsbCBmaWVsZHMgaW4gdGhlIGZvcm0gYW5kIGNhbGwgY2hlY2tJbnB1dFZhbGlkaXR5IHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSB2YWxpZCAoYW5kIGlmIGVycm9yIHNob3VsZCBiZSBkaXNwbGF5ZWQpXHJcbiAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgLy9iZWNhdXNlIHdlIHJlc2V0IHRoZSBmb3JtIGZpZWxkcyB0byBwcmV2aW91cyB2YWx1ZXMsIHRoZXkgc2hvdWxkIGFsbCBiZSB2YWxpZC0gc28gd2UgY2xlYXIgdGhlIGVycm9yIGZvciBlYWNoIG9uZVxyXG4gICAgZWRpdFByb2ZpbGVGb3JtT2JqLmhpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuLy9QcmVzc2luZyB0aGUgc3VibWl0IGJ1dHRvbiB1cGRhdGVzIHRoZSBuYW1lIGFuZCB0aXRsZSBvbiB0aGUgcGFnZSB0byBiZSB0aGUgbmV3bHkgZW50ZXJlZCB2YWx1ZXNcclxuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZUZvcm1TdWJtaXQoZXZ0KSB7XHJcbiAgZXZ0LnByZXZlbnREZWZhdWx0KCk7IC8vIHN0b3BzIHRoZSBicm93c2VyIGZyb20gc3VibWl0dGluZyB0aGUgZm9ybSBpbiB0aGUgZGVmYXVsdCB3YXkuXHJcblxyXG4gIC8vIEluc2VydCBuZXcgdmFsdWVzIHVzaW5nIHRoZSB0ZXh0Q29udGVudFxyXG4gIC8vIHByb3BlcnR5IG9mIHRoZSBxdWVyeVNlbGVjdG9yKCkgbWV0aG9kXHJcbiAgbmFtZVRleHQudGV4dENvbnRlbnQgPSBuYW1lSW5wdXQudmFsdWU7XHJcbiAgdGl0bGVUZXh0LnRleHRDb250ZW50ID0gdGl0bGVJbnB1dC52YWx1ZTtcclxuICBjbG9zZU1vZGFsKGVkaXRQcm9maWxlTW9kYWwpOyAvL2Nsb3NlIHRoZSBtb2RhbCBwYW5lbCB3aGVuIHN1Ym1pdHRlZFxyXG59XHJcblxyXG4vLyBDb25uZWN0IHRoZSBoYW5kbGVyIHRvIHRoZSBmb3JtOiBpdCB3aWxsIHdhdGNoIHRoZSBzdWJtaXQgZXZlbnRcclxuZWRpdFByb2ZpbGVGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgaGFuZGxlUHJvZmlsZUZvcm1TdWJtaXQpO1xyXG4vL3dlIGRpZCBub3QgZXhwbGljaXRseSBmaW5kIHRoZSBzdWJtaXQgYnV0dG9uLi4uanVzdCBsaXN0ZW5pbmcgdG8gdGhlIGV2ZW50XHJcbi8vcHJlc3NpbmcgZW50ZXIgYWxzbyBzdWJtaXRzXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vU2V0IHVwIGFkZCBjYXJkIG1vZGFsXHJcbmFkZENhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBvcGVuTW9kYWwoYWRkQ2FyZE1vZGFsKTtcclxufSk7XHJcblxyXG4vL3ByZXNzaW5nIHN1Ym1pdCBidXR0b24gYWRkcyBhIG5ldyBjYXJkIHdpdGggcGljdHVyZSBhbmQgdGl0bGUgZnJvbSB1c2VyXHJcbmZ1bmN0aW9uIGhhbmRsZUFkZENhcmRTdWJtaXQoZXZ0KSB7XHJcbiAgZXZ0LnByZXZlbnREZWZhdWx0KCk7IC8vIHN0b3BzIHRoZSBicm93c2VyIGZyb20gc3VibWl0dGluZyB0aGUgZm9ybSBpbiB0aGUgZGVmYXVsdCB3YXkuXHJcblxyXG4gIC8vbWFrZSBhIG5ldyBvYmplY3QgdG8gc3RvcmUgdGhlIGltYWdlIHVybCBhbmQgaW1hZ2UgbGFiZWxcclxuICBjb25zdCBuZXdDYXJkSW5mbyA9IHtcclxuICAgIG5hbWU6IGltYWdlTmFtZUlucHV0LnZhbHVlLFxyXG4gICAgbGluazogaW1hZ2VMaW5rSW5wdXQudmFsdWUsXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgbmV3Q2FyZCA9IHJlbmRlckNhcmQobmV3Q2FyZEluZm8sIFwiI2NhcmQtdGVtcGxhdGVcIik7IC8vY3JlYXRlIGEgY2FyZCBlbGVtZW50IGZvciB0aGUgRE9NXHJcbiAgY2FyZHNHcmlkLnByZXBlbmQobmV3Q2FyZCk7IC8vcHJlcGVuZCBpdCB0byB0aGUgZ3JpZCAoYWRkIHRvIGJlZ2lubmluZylcclxuICBhZGRDYXJkRm9ybS5yZXNldCgpOyAgIC8vY2xlYXIgb3V0IHRoZSBpbnB1dCBmaWVsZHNcclxuICBhZGRDYXJkRm9ybU9iai5zZXRCdXR0b25JbmFjdGl2ZSgpOyAgLy9TZXQgYnV0dG9uIHRvIGluYWN0aXZlLWl0IG5lZWRzIHRvIGJlIGhpZGRlbiBiZWNhdXNlIHRoZSBmaWVsZHMgYXJlIGVtcHR5XHJcbiAgY2xvc2VNb2RhbChhZGRDYXJkTW9kYWwpOyAvL2Nsb3NlIHRoZSBtb2RhbCBwYW5lbCB3aGVuIHN1Ym1pdHRlZFxyXG59XHJcbmFkZENhcmRGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgaGFuZGxlQWRkQ2FyZFN1Ym1pdCk7XHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1VuaXZlcnNhbCBIYW5kbGVyIGZvciBBTEwgbW9kYWwgY2xvc2UgYnV0dG9ucyAoWClcclxuLy8gZmluZCBhbGwgY2xvc2UgYnV0dG9uc1xyXG5jb25zdCBjbG9zZUJ1dHRvbnMgPSBBcnJheS5mcm9tKFxyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2Nsb3NlLWJ1dHRvblwiKVxyXG4pOyAvL3VzZSBBcnJheS5mcm9tIHRvIGNvbnZlcnQgdG8gYXJyYXlcclxuXHJcbmNsb3NlQnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHtcclxuICAvLyBmaW5kIHRoZSBjbG9zZXN0IG1vZGFsXHJcbiAgY29uc3QgbW9kYWwgPSBidXR0b24uY2xvc2VzdChcIi5tb2RhbFwiKTtcclxuICAvLyBzZXQgdGhlIGxpc3RlbmVyXHJcbiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBjbG9zZU1vZGFsKG1vZGFsKSk7XHJcbn0pO1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9BZGQgZXZlbnQgbGlzdGVuZXJzIHRvIENsb3NlIGFsbCBtb2RhbHMgYnkgY2xpY2tpbmcgb3V0c2lkZSB0aGVtXHJcbmNvbnN0IG1vZGFscyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbFwiKSk7XHJcbm1vZGFscy5mb3JFYWNoKChtb2RhbCkgPT4ge1xyXG4gIG1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGV2dCkgPT4ge1xyXG4gICAgLy91c2UgbW91c2Vkb3duIHNvIHRoYXQgaWYgdXNlciBjbGlja3Mgb24gYm94IGFuZCBkcmFncyBvdXRzaWRlLCB0aGlzIGV2ZW50IGRvZXMgbm90IHRyaWdnZXJcclxuICAgIC8vb25seSB0cmlnZ2VycyBpZiB0aGV5IGNsaWNrIG91dHNpZGUgbW9kYWwgYm94XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsXCIpIFxyXG4gICAgKSB7XHJcbiAgICAgIGNsb3NlTW9kYWwobW9kYWwpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIC8vYWRkIGxpc3RlbmVyIHRvIGRvY3VtZW50LSBjbG9zZSB0aGUgbW9kYWwgb24gZXNjXHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGV2dCkgPT4ge1xyXG4gICAgLy9hZGQgaXQgdG8gZG9jdW1lbnQgYW5kIG5vdCBtb2RhbCBzbyBpdCBkZXRlY3RzIGlmIHlvdSBoaXQgZXNjIGV2ZW4gaWYgeW91IGFyZSBub3QgZm9jdXNlZCBvbiBtb2RhbC5cclxuICAgIGlmIChldnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgIGNsb3NlTW9kYWwobW9kYWwpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KTsgLy9lbmQgZm9yRWFjaFxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbIkZvcm1WYWxpZGF0b3IiLCJjb25zdHJ1Y3RvciIsInNldHRpbmdzIiwiZm9ybUVsZW1lbnQiLCJ0aGlzIiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbGVtZW50IiwiZXJyb3JNZXNzYWdlIiwiZXJyb3JFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImlkIiwidGV4dENvbnRlbnQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJpbnB1dEVycm9yQ2xhc3MiLCJhZGQiLCJlcnJvckNsYXNzIiwiaGlkZUlucHV0RXJyb3IiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwidmFsaWRpdHkiLCJ2YWxpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hhc0ludmFsaWRJbnB1dCIsImlucHV0TGlzdCIsInNvbWUiLCJfdG9nZ2xlQnV0dG9uU3RhdGUiLCJidXR0b25FbGVtZW50IiwiX2Rpc2FibGVCdXR0b24iLCJfZW5hYmxlQnV0dG9uIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsInNldEJ1dHRvbkluYWN0aXZlIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJlbmFibGVWYWxpZGF0aW9uIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0U2VsZWN0b3IiLCJmb3JFYWNoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImN1c3RvbVNldHRpbmdzIiwiZm9ybVNlbGVjdG9yIiwib3Blbk1vZGFsIiwibW9kYWwiLCJjbG9zZU1vZGFsIiwiaW1hZ2VQb3B1cCIsImRvY3VtZW50IiwiQ2FyZCIsImRhdGEiLCJ0ZW1wbGF0ZVNlbGVjdG9yIiwiY2FyZE5hbWUiLCJuYW1lIiwiY2FyZExpbmsiLCJsaW5rIiwiY2FyZFRlbXBsYXRlIiwiY29udGVudCIsIm5ld0NhcmQiLCJjYXJkSW1hZ2UiLCJjcmVhdGVDYXJkRWxlbWVudCIsImNsb25lTm9kZSIsIl9zZXRJbWFnZUFuZE5hbWUiLCJfc2V0RXZlbnRMaXN0ZW5lciIsImxpa2VCdXR0b24iLCJkZWxldGVCdXR0b24iLCJfbGlrZSIsIl9kZWxldGUiLCJfb3BlbkltYWdlUG9wdXAiLCJldnQiLCJ0YXJnZXQiLCJ0b2dnbGUiLCJpbWFnZVBvcHVwUGljIiwiaW1hZ2VQb3B1cFRleHQiLCJzcmMiLCJhbHQiLCJzZXREYXRhSW1hZ2VQb3B1cCIsImNsb3Nlc3QiLCJzdHlsZSIsInJlbmRlckNhcmQiLCJlZGl0UHJvZmlsZUJ1dHRvbiIsImVkaXRQcm9maWxlTW9kYWwiLCJlZGl0UHJvZmlsZUZvcm0iLCJuYW1lVGV4dCIsInRpdGxlVGV4dCIsIm5hbWVJbnB1dCIsInRpdGxlSW5wdXQiLCJhZGRDYXJkQnV0dG9uIiwiYWRkQ2FyZE1vZGFsIiwiYWRkQ2FyZEZvcm0iLCJpbWFnZU5hbWVJbnB1dCIsImltYWdlTGlua0lucHV0IiwiZm9ybVZhbGlkYXRvck9iakxpc3QiLCJtYXAiLCJmb3JtIiwiZm9ybU9iaiIsImVkaXRQcm9maWxlRm9ybU9iaiIsImZpbmQiLCJvYmoiLCJnZXRBdHRyaWJ1dGUiLCJhZGRDYXJkRm9ybU9iaiIsImNhcmRzR3JpZCIsIml0ZW0iLCJhcHBlbmQiLCJ2YWx1ZSIsInByZXZlbnREZWZhdWx0IiwicHJlcGVuZCIsInJlc2V0IiwiYnV0dG9uIiwiY29udGFpbnMiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9